const title: []char :: "Julia set"
const realMin: float :: -1.5
const realMax: float :: 1.5
const realDel: float :: (@realMax - @realMin) / @sizeX $ float
const imagMin: float :: -1.2
const imagMax: float :: 1.2
const imagDel: float :: (@imagMax - @imagMin) / @sizeY $ float
const calcNum: int :: 150

const sizeX: int :: 400
const sizeY: int :: (@sizeX $ float * (@imagMax - @imagMin) / (@realMax - @realMin)) $ int
const margin: int :: 5
const wndSizeX: int :: @sizeX + 2 * @margin
const wndSizeY: int :: @sizeY + 2 * @margin

func main()
	do @calc()
	var wndMain: wnd@Wnd :: wnd@makeWnd(null, %aspect, @wndSizeX, @wndSizeY, @title)
	var drawMain: wnd@Draw :: wnd@makeDraw(wndMain, 0, 0, @wndSizeX, @wndSizeY, %scale, %scale, false)
	do drawMain.onPaint :: @onPaint
	do drawMain.paint()
	while(wnd@act())
	end while
end func

var colors: [][]float

func calc()
	const cr: float :: -0.4
	const ci: float :: 0.6
	do @colors :: #[@sizeY, @sizeX]float
	for row(0, @sizeY - 1)
		for col(0, @sizeX - 1)
			var zr: float :: @realMin + @realDel * col $ float
			var zi: float :: @imagMin + @imagDel * row $ float
			var num: int
			for i(0, @calcNum)
				do num :: i
				var znr: float :: zr * zr - zi * zi + cr
				if(znr > 4.0)
					break i
				end if
				var zni: float :: 2.0 * zr * zi + ci
				if(zni > 4.0)
					break i
				end if
				do zr :: znr
				do zi :: zni
			end for
			do @colors[row][col] :: num $ float / @calcNum $ float
		end for
	end for
end func

func onPaint(wnd: wnd@WndBase, width: int, height: int)
	do draw@rect(0.0, 0.0, @wndSizeX $ float, @wndSizeY $ float, 0xFF6188FF)
	for row(0, @sizeY - 1)
		for col(0, @sizeX - 1)
			var c: int :: (@colors[@sizeY - 1 - row][col] * 255.0) $ int
			do draw@rect((col + @margin) $ float, (row + @margin) $ float, 1.0, 1.0, 0xFF000000 + c * 0x10101)
		end for
	end for
	do draw@render(0)
end func
