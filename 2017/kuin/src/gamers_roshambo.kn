const title: []char :: "ゲーマーじゃんけんの判定をするゲーム"
var wndMain: wnd@Wnd 
var drawMain: wnd@Draw
const width: float :: 400.0
const height: float :: 450.0
var texP: draw@Tex
var texS: draw@Tex
var texR: draw@Tex
var font: draw@Font
var fontSmall: draw@Font
var selected: @Hand
var answered: bool
var correct: bool
const peopleNum: int :: 12

enum Hand
	paper
	scissors
	rock
	drawn
end enum
var handStr: [][]char

func main()
	do @font :: draw@makeFont(null, 24, true, false, false, 30.0)
	do @fontSmall :: draw@makeFont(null, 12, true, false, false, 15.0)
	do @texP :: draw@makeTex("res/janken_pa.png")
	do @texS :: draw@makeTex("res/janken_choki.png")
	do @texR :: draw@makeTex("res/janken_gu.png")
	do @handStr :: ["パー", "チョキ", "グー", "あいこ"]
	do @wndMain :: wnd@makeWnd(null, %aspect, @width $ int, @height $ int, @title)
	do @drawMain :: wnd@makeDraw(@wndMain, 0, 0, @width $ int, @height $ int, %scale, %scale, false)
	do @drawMain.onMouseUpL :: @drawMainOnMouseUpL
	do draw@clearColor(16#FF333333)
	do wnd@msgBox(@wndMain, "ゲーマーじゃんけんの勝敗判定を素早く行えるように訓練するゲームです。\nゲーマーじゃんけんは少数派の手が勝ちのルールです。\n少数派の手が複数ある場合はその中でじゃんけんの強い方が勝ちです。\n12人でゲーマーじゃんけんが行われます。勝敗判定を行ってください。", @title, %none, %ok)
	do wnd@onKeyPress(@onKeyPress)
	while(@game())
	end while
end func

var hands: []@Hand
func game(): bool
	do @hands :: #[@peopleNum]@Hand
	for i(0, @peopleNum - 1)
		do @hands[i] :: lib@rnd(2, 2) $ @Hand
	end for
	while(wnd@act())
		do drawAll()
		do draw@render(60)
		if(@answered)
			do @answered :: false
			if(@correct)
				ret true
			else
				do wnd@msgBox(@wndMain, "不正解です!\n\{@handStr[@selected $ int]}ではありません！", @title, %none, %ok)
			end if
		end if
	end while

	func drawAll()
		for i(0, 11)
			var x: int :: i % 4
			var y: int :: i / 4
			do drawHand(@hands[i], 100.0 * x $ float, 100.0 * y $ float)
		end for
		do draw@rect(0.0, 300.0, @width, @height - 300.0, 16#FFFFFFFF)
		do @font.draw(5.0, 300.0, "勝ちの手を選択してください", 16#FF000000)
		do draw@line(0.0, 340.0, @width, 340.0, 16#FFAAAAAA)
		do draw@line(100.0, 340.0, 100.0, @height, 16#FFAAAAAA)
		do draw@line(200.0, 340.0, 200.0, @height, 16#FFAAAAAA)
		do draw@line(300.0, 340.0, 300.0, @height, 16#FFAAAAAA)
		do @fontSmall.draw(0.0, 340.0, "1", 16#FF000000)
		do @fontSmall.draw(100.0, 340.0, "2", 16#FF000000)
		do @fontSmall.draw(200.0, 340.0, "3", 16#FF000000)
		do @fontSmall.draw(300.0, 340.0, "4", 16#FF000000)
		do drawHand(%rock, 0.0, 345.0)
		do drawHand(%scissors, 100.0, 345.0)
		do drawHand(%paper, 200.0, 345.0)
		do @font.draw(305.0, 370.0, "あいこ", 16#FF000000)
		func drawHand(hand: @Hand, x: float, y: float)
			switch(hand)
			case %paper
				do @texP.drawScale(x, y, 100.0, 100.0, 0.0, 0.0, 256.0, 256.0, 16#FFFFFFFF)
			case %scissors
				do @texS.drawScale(x, y, 100.0, 100.0, 0.0, 0.0, 256.0, 256.0, 16#FFFFFFFF)
			case %rock
				do @texR.drawScale(x, y, 100.0, 100.0, 0.0, 0.0, 256.0, 256.0, 16#FFFFFFFF)
			end switch
		end func
	end func
end func

func drawMainOnMouseUpL(wnd: wnd@Draw, x: int, y: int)
	if(y < 340)
		ret
	end if
	if(x < 100)
		do @selected :: %rock
	elif(x < 200)
		do @selected :: %scissors
	elif(x < 300)
		do @selected :: %paper
	else
		do @selected :: %drawn
	end if
	do @answered :: true
	do @correct :: @judge() = @selected
end func

func onKeyPress(key: wnd@Key, shiftCtrl: wnd@ShiftCtrl): bool
	switch(key)
	case %_1
		do @selected :: %rock
	case %_2
		do @selected :: %scissors
	case %_3
		do @selected :: %paper
	case %_4
		do @selected :: %drawn
	default
		ret false
	end switch
	do @answered :: true
	do @correct :: @judge() = @selected
	ret false
end func

func judge(): @Hand
	var countPaper: int :: 0
	var countScissors: int :: 0
	var countRock: int :: 0
	for i(0, ^@hands - 1)
		switch(@hands[i])
		case %paper
			do countPaper :+ 1
		case %scissors
			do countScissors :+ 1
		case %rock
			do countRock :+ 1
		end switch
	end for
	if(countPaper = countScissors & countPaper = countRock)
		ret %drawn
	end if
	if(countPaper = @peopleNum | countScissors = @peopleNum | countRock = @peopleNum)
		ret %drawn
	end if
	if(countPaper = 0)
		if(countScissors < countRock)
			ret %scissors
		else
			ret %rock
		end if
	end if
	if(countScissors = 0)
		if(countRock < countPaper)
			ret %rock
		else
			ret %paper
		end if
	end if
	if(countRock = 0)
		if(countPaper < countScissors)
			ret %paper
		else
			ret %scissors
		end if
	end if
	if(countPaper < countScissors)
		if(countPaper <= countRock)
			ret %paper
		else
			ret %rock
		end if
	else
		if(countScissors < countRock)
			ret %scissors
		else
			ret %rock
		end if
	end if
end func
