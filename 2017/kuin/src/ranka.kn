var title: []char :: "Ranka(ランカ)のような何か"
var wndMain: wnd@Wnd 
var drawMain: wnd@Draw
var font: draw@Font
const width: int :: 6
const height: int :: 6
const size: float :: 50.0
var board: [][][]@Ranka
var colorArray: []int
const lineColor: int :: 16#FF333333

func main()
	do @wndMain :: wnd@makeWnd(null, %fix, (@width $ float * @size * 1.5) $ int, (@height $ float * @size * 1.5) $ int, @title)
	do @drawMain :: wnd@makeDraw(@wndMain, 0, 0, (@width $ float * @size * 1.5) $ int, (@height $ float * @size * 1.5) $ int, %scale, %scale, false)
	do @font :: draw@makeFont(null, (@size / 2.0) $ int, true, false, true, 0.0)
	do wnd@msgBox(@wndMain, "イージー碁:Ranka(ランカ)というゲームを作ろうとしている途中です。\n相手のコマを先に5つ取った方が勝ちのゲームなのですが、取るところを実装していません！", @title, %none, %ok)
	do @colorArray :: [16#FFCCCCCC, 16#FFFF0000, 16#FF00AA00]
	do draw@clearColor(16#FFFFFFFF)
	do @drawMain.onMouseUpL :: @drawMainOnMouseUpL
	while(@game())
	end while
end func

func game(): bool
	do @reset()
	do @nextColor :: %red
	while gameLoop(wnd@act())
		do @drawAll()
	end while
end func

func drawAll()
	do drawLines()
	for i(0, 1)
		for x(0, @width - 1)
			for y(0, @height - 1)
				if(@board[i][x][y] <>& null)
					do @board[i][x][y].draw()
				end if
			end for
		end for
	end for
	do draw@render(60)

	func drawLines()
	end func
end func

func reset()
	do @board :: #[2, @width, @height]@Ranka
	for inverted(0, 1)
		for x(0, @width - 1)
			for y(0, @height - 1)
				if(x + y + inverted >= 3 & x + y + inverted <= 8)
					do @board[inverted][x][y] :: (#@Ranka).init(x $ float + y $ float * 0.5, y $ float * 3.0 ^ 0.5 / 2.0 + 2.0, inverted $ bool)
					;do @board[inverted][x][y].color :: (inverted + 1) $ @Color
				end if
			end for
		end for
	end for
end func

class Ranka()
	var x1: float
	var y1: float
	var x2: float
	var y2: float
	var x3: float
	var y3: float
	+var inverted: bool
	+var f: bool
	+var color: @Color
	+func init(x: float, y: float, inverted: bool): @Ranka
		var yy: float :: 3.0 ^ 0.5 / 2.0
		do me.inverted :: inverted
		do me.f :: false
		do me.color :: %none
		if(me.inverted)
			do me.x1 :: (x + 1.5) * @size
			do me.y1 :: (y + yy) * @size
			do me.x2 :: (x + 1.0) * @size
			do me.y2 :: y * @size
			do me.x3 :: (x + 0.5) * @size
			do me.y3 :: (y + yy) * @size
		else
			do me.x1 :: x * @size
			do me.y1 :: y * @size
			do me.x2 :: (x + 0.5) * @size
			do me.y2 :: (y + yy) * @size
			do me.x3 :: (x + 1.0) * @size
			do me.y3 :: y * @size
		end if
		ret me
	end func
	+func draw()
		do draw@tri(me.x1, me.y1, me.x2, me.y2, me.x3, me.y3, @colorArray[me.color $ int])
		do draw@line(me.x1, me.y1, me.x2, me.y2, @lineColor)
		do draw@line(me.x2, me.y2, me.x3, me.y3, @lineColor)
		do draw@line(me.x3, me.y3, me.x1, me.y1, @lineColor)
	end func
	+func isInside(x: float, y: float): bool
		ret crossProduct(me.x2 - me.x1, me.y2 - me.y1, x - me.x1, y - me.y1) < 0.0 &
		| crossProduct(me.x3 - me.x2, me.y3 - me.y2, x - me.x2, y - me.y2) < 0.0 &
		| crossProduct(me.x1 - me.x3, me.y1 - me.y3, x - me.x3, y - me.y3) < 0.0
		func crossProduct(x1: float, y1: float, x2: float, y2: float): float
			ret (x1 * y2 - y1 * x2)
		end func
	end func
end class

enum Color
	none
	red
	green
end enum

var nextColor: @Color

func drawMainOnMouseUpL(wnd: wnd@Draw, xMouse: int, yMouse: int)
	for i(0, 1)
		for x(0, @width - 1)
			for y(0, @height - 1)
				if(@board[i][x][y] <>& null & @board[i][x][y].isInside(xMouse $ float, yMouse $ float))
					if(@board[i][x][y].color = %none)
						do @board[i][x][y].color :: @nextColor
						do @nextColor :: @nextColor = %red ?(%green $ @Color, %red)
					end if
					break i
				end if
			end for
		end for
	end for
end func
