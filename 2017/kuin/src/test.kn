const title: []char :: "ゲーマーじゃんけん判定ゲーム"
var wndMain: wnd@Wnd 
var drawMain: wnd@Draw
var drawMain2: wnd@Draw
var texP: draw@Tex
var texS: draw@Tex
var texR: draw@Tex
var font: draw@Font
var fontSmall: draw@Font
var selected: @Hand
var answered: bool
var correct: bool
var peopleNum: int
const backgroundColor: int :: 16#FF333333
const peopleMin: int :: 2
const peopleMax: int :: 15
const widthNum: int :: 5
const heightNum: int :: (@peopleMax + @widthNum - 1) / @widthNum
const size: float :: 100.0
const width: float :: @widthNum $ float * @size
const height: float :: (@heightNum + 1) $ float * @size + @size * 0.5
const selectAreaY: float :: @heightNum $ float * @size + @size * 0.5

enum Hand
	paper
	scissors
	rock
	drawn
end enum
var handStr: [][]char

func main()
	assert @size >= 50.0
	assert @size <= 100.0
	assert @peopleMin >= 2
	assert @peopleMax <= 16
	do @font :: draw@makeFont(null, (0.24 * @size) $ int, true, false, false, 0.30 * @size)
	do @fontSmall :: draw@makeFont(null, (0.12 * @size) $ int, true, false, false, 0.15 * @size)
	do @texP :: draw@makeTex("res/janken_pa.png")
	do @texS :: draw@makeTex("res/janken_choki.png")
	do @texR :: draw@makeTex("res/janken_gu.png")
	do @handStr :: ["パー", "チョキ", "グー", "あいこ"]
	do @wndMain :: wnd@makeWnd(null, %aspect, @width $ int, @height $ int, @title)
	do @drawMain :: wnd@makeDraw(@wndMain, 0, 0, @width $ int, @height $ int, %scale, %scale, false)
	do @drawMain2 :: wnd@makeDraw(@wndMain, 50, 0, @width $ int, @height $ int, %scale, %scale, false)
	while(wnd@act())
		do draw@target(@drawMain)
		do @texR.drawScale(0.0, 0.0, @size, @size, 0.0, 0.0, 256.0, 256.0, 16#FFFFFFFF)
		do draw@target(@drawMain2)
		do @texP.drawScale(0.0, 0.0, @size, @size, 0.0, 0.0, 256.0, 256.0, 16#FFFFFFFF)
		do draw@target(@drawMain)
		do draw@render(-1)
		do draw@target(@drawMain2)
		do draw@render(60)
	end while
	do @drawMain.onMouseUpL :: @drawMainOnMouseUpL
	do draw@clearColor(@backgroundColor)
	do wnd@msgBox(@wndMain, "ゲーマーじゃんけんの勝敗判定を素早く行えるように訓練するゲームです。\nゲーマーじゃんけんは少数派の手が勝ちのルールです。\n少数派の手が複数ある場合はその中でじゃんけんの強い方が勝ちです。\n\{@peopleMax}人以下でゲーマーじゃんけんが行われます。勝敗判定を行ってください。", @title, %none, %ok)
	do wnd@onKeyPress(@onKeyPress)
	while(@game())
	end while
end func

var hands: []@Hand
func game(): bool
	do @peopleNum :: lib@rnd(@peopleMin, @peopleMax)
	do @hands :: #[@peopleNum]@Hand
	for i(0, @peopleNum - 1)
		do @hands[i] :: lib@rnd(0, 2) $ @Hand
	end for
	while(wnd@act())
		do drawAll()
		if(@answered)
			do @answered :: false
			if(@correct)
				ret true
			else
				do wnd@msgBox(@wndMain, "不正解です!\n\{@handStr[@selected $ int]}ではありません！", @title, %none, %ok)
			end if
		end if
	end while

	func drawAll()
		const lineColor: int :: 16#FFAAAAAA
		const fontColor: int :: 16#FF000000
		for i(0, @peopleNum - 1)
			do drawHand(@size * (i % @widthNum) $ float, @size * (i / @widthNum) $ float, @hands[i])
		end for
		do draw@rect(0.0, @heightNum $ float * @size, @width, @height - @heightNum $ float * @size, 16#FFFFFFFF)
		do draw@line(0.0, @selectAreaY, @width, @selectAreaY, lineColor)
		do draw@line(@width / 4.0 * 1.0, @selectAreaY, @width / 4.0 * 1.0, @height, lineColor)
		do draw@line(@width / 4.0 * 2.0, @selectAreaY, @width / 4.0 * 2.0, @height, lineColor)
		do draw@line(@width / 4.0 * 3.0, @selectAreaY, @width / 4.0 * 3.0, @height, lineColor)
		const xx: float :: (@width / 4.0 - @size) / 2.0
		do drawHand(xx + @width / 4.0 * 0.0, @selectAreaY, %rock)
		do drawHand(xx + @width / 4.0 * 1.0, @selectAreaY, %scissors)
		do drawHand(xx + @width / 4.0 * 2.0, @selectAreaY, %paper)
		do @font.draw(xx + @width / 4.0 * 3.0 + 5.0, @selectAreaY + 0.3 * @size, "あいこ", fontColor)
		do @font.draw(5.0, @heightNum $ float * @size, "勝ちの手を選択してください", fontColor)
		do @fontSmall.draw(@width / 4.0 * 0.0 + 2.0, @selectAreaY, "1", fontColor)
		do @fontSmall.draw(@width / 4.0 * 1.0 + 2.0, @selectAreaY, "2", fontColor)
		do @fontSmall.draw(@width / 4.0 * 2.0 + 2.0, @selectAreaY, "3", fontColor)
		do @fontSmall.draw(@width / 4.0 * 3.0 + 2.0, @selectAreaY, "4", fontColor)
		do draw@render(60)

		func drawHand(x: float, y: float, hand: @Hand)
			switch(hand)
			case %paper
				do @texP.drawScale(x, y, @size, @size, 0.0, 0.0, 256.0, 256.0, 16#FFFFFFFF)
			case %scissors
				do @texS.drawScale(x, y, @size, @size, 0.0, 0.0, 256.0, 256.0, 16#FFFFFFFF)
			case %rock
				do @texR.drawScale(x, y, @size, @size, 0.0, 0.0, 256.0, 256.0, 16#FFFFFFFF)
			end switch
		end func
	end func
end func

func drawMainOnMouseUpL(wnd: wnd@Draw, x: int, y: int)
	if(y < @selectAreaY $ int)
		ret
	end if
	switch(x / (@width / 4.0) $ int)
	case 0
		do @selected :: %rock
	case 1
		do @selected :: %scissors
	case 2
		do @selected :: %paper
	case 3
		do @selected :: %drawn
	end switch
	do @answered :: true
	do @correct :: @judge() = @selected
end func

func onKeyPress(key: wnd@Key, shiftCtrl: wnd@ShiftCtrl): bool
	switch(key)
	case %_1
		do @selected :: %rock
	case %_2
		do @selected :: %scissors
	case %_3
		do @selected :: %paper
	case %_4
		do @selected :: %drawn
	default
		ret false
	end switch
	do @answered :: true
	do @correct :: @judge() = @selected
	ret false
end func

func judge(): @Hand
	var countPaper: int :: 0
	var countScissors: int :: 0
	var countRock: int :: 0
	for i(0, ^@hands - 1)
		switch(@hands[i])
		case %paper
			do countPaper :+ 1
		case %scissors
			do countScissors :+ 1
		case %rock
			do countRock :+ 1
		end switch
	end for
	if(countPaper = countScissors & countPaper = countRock)
		ret %drawn
	end if
	if(countPaper = @peopleNum | countScissors = @peopleNum | countRock = @peopleNum)
		ret %drawn
	end if
	if(countPaper = 0)
		if(countScissors < countRock)
			ret %scissors
		else
			ret %rock
		end if
	end if
	if(countScissors = 0)
		if(countRock < countPaper)
			ret %rock
		else
			ret %paper
		end if
	end if
	if(countRock = 0)
		if(countPaper < countScissors)
			ret %paper
		else
			ret %scissors
		end if
	end if
	if(countPaper < countScissors)
		if(countPaper <= countRock)
			ret %paper
		else
			ret %rock
		end if
	else
		if(countScissors < countRock)
			ret %scissors
		else
			ret %rock
		end if
	end if
end func
