{※生成したwavファイルを再生する際は、音量にご注意ください。}
const title: []char :: "Kuinで作る、はじめてのDAW制作"
var wndMain: wnd@Wnd 
var drawStatus: wnd@Draw
const colorBackground: int :: 0x00F0F0F0
const width: int :: 400
const height: int :: 110
var inputEdit: wnd@Edit
var tabOrder: wnd@TabOrder
var sinRadio: wnd@Radio
var rectRadio: wnd@Radio
var chordsChk: wnd@Chk
var vibratoChk: wnd@Chk
var saveBtn: wnd@Btn
var resetBtn: wnd@Btn
const defaultInputStr: []char :: "19 18 19 18 19 14 17 15 12 12 12 3 7 12 14 14 14 7 11 14 15 15 15"
;const defaultInputStr: []char :: "10 12 19 17 15 17 15 17 19 15 10 15 17 12 14 15 12 14 15 17 10 15 17 19"

func main()
	do @wndMain :: wnd@makeWnd(null, %aspect, @width, @height, @title)
	do @drawStatus :: wnd@makeDraw(@wndMain, 0, 100, @width, 10, %scale, %scale, false)
	do wnd@makeLabel(@wndMain, 5, 5, 290, 12, %fix, %fix, "音を数値で入力してください。スペース区切りです。")
	do @inputEdit :: wnd@makeEdit(@wndMain, 5, 25, @width - 10, 20, %scale, %fix)
	do @sinRadio :: wnd@makeRadio(@wndMain, 5, 50, 60, 20, %fix, %fix, "サイン波")
	do @sinRadio.setChk(true)
	do @rectRadio :: wnd@makeRadio(@wndMain, 80, 50, 60, 20, %fix, %fix, "矩形波")
	do @vibratoChk :: wnd@makeChk(@wndMain, 160, 50, 80, 20, %fix, %fix, "ビブラート")
	do @chordsChk :: wnd@makeChk(@wndMain, 240, 50, 80, 20, %fix, %fix, "和音")
	do @saveBtn :: wnd@makeBtn(@wndMain, 5, 75, 50, 20, %fix, %fix, "保存")
	do @resetBtn :: wnd@makeBtn(@wndMain, @width - 55, 75, 50, 20, %move, %fix, "リセット")
	do @resetBtn.onPush :: reset
	do @saveBtn.onPush :: save
	do @tabOrder :: wnd@makeTabOrder([@inputEdit $ wnd@WndBase, @saveBtn $ wnd@WndBase, @resetBtn $ wnd@WndBase])
	do wnd@setOnKeyPress(@onKeyPress)
	do reset(null)
	do draw@clearColor(@colorBackground)
	do draw@render(0)

	while(wnd@act())
	end while

	func reset(wnd: wnd@WndBase)
		do @inputEdit.setText(@defaultInputStr)
	end func

	func save(wnd: wnd@WndBase)
		var path: []char :: wnd@saveFileDialog(@wndMain, ["音声データ (*.wav)", "*.wav"], 0, "wav")
		if(path =& null)
			ret
		end if
		var filePtr: file@Writer :: file@makeWriter(path, false)
		if(filePtr =& null)
			do wnd@msgBox(@wndMain, "保存に失敗しました。\{path}", @title, %err, %ok)
			ret
		end if

		var inputStr: []char :: @inputEdit.getText()
		var splittedStrs: [][]char :: inputStr.split(" ")
		var datasize: int :: ^splittedStrs * 44100
		var filesize: int :: datasize + 44 {ヘッダが44bytes}
		var header: []bit8 :: [
		| 0x52b8, 0x49b8, 0x46b8, 0x46b8] {'RIFF'}
		| ~ ((filesize - 8) $> []bit8).sub(0, 4) ~ {ファイルサイズ(byte) - 8(byte)}
		| [
		| 0x57b8, 0x41b8, 0x56b8, 0x45b8, {'WAVE'}
		| 0x66b8, 0x6Db8, 0x74b8, 0x20b8, {'fmt '}
		| 0x10b8, 0x00b8, 0x00b8, 0x00b8, {fmt チャンクのバイト数}
		| 0x01b8, 0x00b8, {フォーマットID}
		| 0x01b8, 0x00b8, {チャンネル数}
		| 0x44b8, 0xACb8, 0x00b8, 0x00b8, {サンプリングレート}
		| 0x44b8, 0xACb8, 0x00b8, 0x00b8, {データ速度}
		| 0x01b8, 0x00b8, {ブロックサイズ}
		| 0x08b8, 0x00b8, {サンプルあたりのビット数}
		| 0x64b8, 0x61b8, 0x74b8, 0x61b8] {'data'}
		| ~ ((datasize - 8) $> []bit8).sub(0, 4)  {データサイズ(byte)}
		var bin: []bit8 :: ##header
		var theta1: float :: 0.0
		var theta2: float :: 0.0
		var vib: float :: 0.0
		for i(0, ^splittedStrs - 1)
			var key: float
			do splittedStrs[i].toFloat(&key)
			for j(0, 44100 / 4)
				if(@chordsChk.getChk())
					do bin :~ [(
					| (@sinRadio.getChk() ?(lib@sin(theta1), lib@sin(theta1) > 0.0 ?(1.0, -1.0))) * 64.0 +
					| (@sinRadio.getChk() ?(lib@sin(theta2), lib@sin(theta2) > 0.0 ?(1.0, -1.0))) * 63.0 +
					| 128.0) $ int $ bit8]
				else
					do bin :~ [((@sinRadio.getChk() ?(lib@sin(theta1), lib@sin(theta1) > 0.0 ?(1.0, -1.0))) * 127.0 + 128.0) $ int $ bit8]
				end if
				do theta1 :+ (441.0 + (@vibratoChk.getChk() ?(lib@sin(vib) * 10.0, 0.0))) * 2.0 ^ ((key + 0.0) / 12.0) * 2.0 * lib@pi / 44100.0
				do theta2 :+ (441.0 + (@vibratoChk.getChk() ?(lib@sin(vib) * 10.0, 0.0))) * 2.0 ^ ((key + 7.0) / 12.0) * 2.0 * lib@pi / 44100.0
				do vib :+ 5.0 * 2.0 * lib@pi / 44100.0
			end for
			do draw@rect(0.0, 0.0, (@width * (i + 1) / ^splittedStrs) $ float, 10.0, 0xFFFF0000)
			do draw@render(0)
		end for
		do filePtr.write(bin)
		do filePtr.fin()
		do wnd@msgBox(@wndMain, "保存しました。", @title, %none, %ok)
		do draw@clearColor(@colorBackground)
		do draw@render(0)
	end func
end func

func onKeyPress(key: wnd@Key, shiftCtrl: wnd@ShiftCtrl): bool
	if(@tabOrder <>& null & @tabOrder.chk(key, shiftCtrl))
		ret false
	end if
	ret false
end func
