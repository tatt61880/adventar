{ 素因数分解した結果をリストで返します。 }
func primeFactorization(num: int): list<int>
	var retVal: list<int> :: #list<int>
	var i: int :: 2
	while(i * i <= num)
		while(num % i = 0)
			do num :/ i
			do retVal.add(i)
		end while
		do i :+ 1
	end while
	if(num > 1)
		do retVal.add(num)
	end if
	do retVal.head() {FIXME 本来は不要なはず}
	ret retVal
end func

{ 素因数分解した結果の配列を元に、素因数分解の結果を出力します。 }
func printPF(factors: list<int>)
	var str: []char :: ""
	while(!factors.term())
		if(^str <> 0)
			do str :~ "*"
		end if
		var num: int :: factors.get()
		do str :~ num.toStr()
		var count: int :: 1
		do factors.next()
		while(!factors.term() & factors.get() = num)
			do count :+ 1
			do factors.next()
		end while
		if(count <> 1)
			do str :~ "^" ~ count.toStr()
		end if
	end while
	do cui@print(str ~ "\n")
end func

func main()
	do @printPF(@primeFactorization(12)) { 2^2*3 }
	do @printPF(@primeFactorization(7)) { 7 }
	do @printPF(@primeFactorization(1024)) { 2^10 }
	do @printPF(@primeFactorization(1113)) { 3*7*53 }
	do @printPF(@primeFactorization(20161113)) { 3*7*960053 }
	do @printPF(@primeFactorization(61880)) { 2^3*5*7*13*17 }
end func
